{
  "GET /api": {
    "description": "serves up a json representation of all the available endpoints of this api",
    "queries": []
  },

  "GET /api/topics": {
    "description": "serves an array of all news topics",
    "queries": [],
    "exampleResponse": {
      "topics": [
        { "slug": "coding", "description": "Code is love, code is life" }
      ]
    }
  },

  "POST /api/topics": {
    "description": "accepts a request body with a specified slug and description, creates the topic with these properties, and returns the topic object to the user",
    "exampleRequest": {
      "slug": "New Topic Name",
      "description": "New description"
    },
    "exampleResponse": {
      "topic": {
        "slug": "New Topic Name",
        "description": "New description"
      }
    }
  },

  "GET /api/articles": {
    "description": "serves an array of all available articles, paginated by a default limit of 10 articles per page, along with a total count of all available articles",
    "queries": ["author", "topic", "sort_by", "order", "limit", "page"],
    "exampleResponse": {
      "articles": [
        {
          "title": "What does Jose Mourinho's handwriting say about his personality?",
          "topic": "football",
          "author": "weegembump",
          "body": "Text from the article..",
          "created_at": "2021-09-27T10:33:59.809Z",
          "votes": 0
        }
      ],
      "total_count": 1
    }
  },

  "POST /api/articles": {
    "description": "accepts a request body with a specified author, title, body and topic, creates the article with these properties, and returns the article object to the user",
    "exampleRequest": {
      "author": "user1",
      "title": "My New Article",
      "body": "Text of the new article...",
      "topic": "cooking"
    },
    "exampleResponse": {
      "article": {
        "article_id": 22,
        "title": "My New Article",
        "body": "Text of the new article...",
        "votes": 0,
        "topic": "cooking",
        "created_at": "2021-09-27T10:33:59.809Z",
        "author": "user1",
        "comment_count": 0
      }
    }
  },

  "GET /api/articles/:article_id": {
    "description": "serves an object with data relating to the selected article",
    "queries": [],
    "exampleResponse": {
      "article": {
        "author": "happyamy2016",
        "title": "High Altitude Cooking",
        "article_id": 28,
        "body": "Text from the article..",
        "topic": "cooking",
        "created_at": "2021-09-27T10:33:59.809Z",
        "votes": 0,
        "comment_count": 10
      }
    }
  },

  "PATCH /api/articles/:article_id": {
    "description": "accepts a request object with an inc_votes property, increases or decreases the vote count of the specified article according to this value, and returns the updated article object",
    "queries": [],
    "exampleRequest": { "inc_votes": 10 },
    "exampleResponse": {
      "article": {
        "author": "happyamy2016",
        "title": "High Altitude Cooking",
        "article_id": 28,
        "body": "Text from the article..",
        "topic": "cooking",
        "created_at": "2021-09-27T10:33:59.809Z",
        "votes": 10,
        "comment_count": 10
      }
    }
  },

  "DELETE /api/articles/:article_id": {
    "description": "deletes the specified article",
    "exampleResponse": null
  },

  "GET /api/articles/:article_id/comments": {
    "description": "serves an array of all comments associated with the selected article, paginated to a default limit of 10 comments per page, alongside a total count of all available comments",
    "queries": ["limit", "page"],
    "exampleResponse": {
      "comments": [
        {
          "comment_id": 15,
          "votes": 8,
          "created_at": "2021-09-27T10:33:59.809Z",
          "author": "jessjelly",
          "body": "Text from the comment.."
        }
      ],
      "total_count": 1
    }
  },

  "POST /api/articles/:article_id/comments": {
    "description": "accepts a request with a username and body property, adds a comment to the database with these values, and returns the posted comment",
    "exampleRequest": {
      "username": "happyamy2016",
      "body": "My new comment..."
    },
    "exampleResponse": {
      "comment": {
        "comment_id": 100,
        "votes": 0,
        "created_at": "2021-09-27T10:33:59.809Z",
        "author": "happyamy2016",
        "body": "My new comment..."
      }
    }
  },

  "PATCH /api/comments/:comment_id": {
    "description": "accepts a request object with an inc_votes property, increases or decreases the vote count of the specified comment according to this value, and returns the updated comment",
    "exampleRequest": { "inc_votes": 1 },
    "exampleResponse": {
      "comment": {
        "comment_id": 10,
        "body": "Text of the comment...",
        "votes": 2,
        "author": "user1",
        "article_id": 12,
        "created_at": "2021-09-27T10:33:59.809Z"
      }
    }
  },

  "DELETE /api/comments/:comment_id": {
    "description": "deletes the specified comment",
    "exampleResponse": null
  },

  "GET /api/users": {
    "description": "serves an array of all users",
    "queries": [],
    "exampleResponse": {
      "users": [
        {
          "username": "user1",
          "name": "Margot",
          "avatar_url": "https://my-test-avatar.com/12345"
        }
      ]
    }
  },

  "GET /api/users/:username": {
    "description": "serves an object with data relating to the selected user",
    "queries": [],
    "exampleResponse": {
      "user": {
        "username": "user2",
        "name": "Alex",
        "avatar_url": "https://my-test-avatar2.com/12345789"
      }
    }
  }
}
